{"version":3,"sources":["constants.js","components/Card.js","components/CardList.js","components/ErrorBoundary.js","components/Scroll.js","components/SearchBox.js","containers/App.js","actions.js","reducers.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","ErrorBoundary","props","state","hasError","this","setState","children","Component","Scroll","style","overflowY","border","height","SearchBox","searchChange","type","placeholder","onChange","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","error","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6dda21a6.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={robots[i].id}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n            />\n          );\n        })\n      }\n    </div>\n  )\n}\n\nexport default CardList;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n\n  componentDidCatch() {\n    this.setState({ hasError: true});\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooops. That is not good</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflowY: 'scroll', border: '1px solid black', height: '800px' }}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  )\n}\n\nexport default SearchBox;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { requestRobots, setSearchField } from '../actions';\nimport CardList from '../components/CardList';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Scroll from '../components/Scroll';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\n\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { robots, searchField, onSearchChange, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return (\n      <div className='tc'>\n        <h1 className='f1'>RoboFriends</h1>\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          {isPending ? <h1>Loading</h1> :\n            <ErrorBoundary>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundary>\n          }\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n}","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  robots: [],\n  isPending: true\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false };\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload };\n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, combineReducers, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport 'tachyons';\nimport App from './containers/App';\nimport './index.css';\nimport { requestRobots, searchRobots } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducers = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}