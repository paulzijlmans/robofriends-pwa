{"version":3,"sources":["constants.js","components/Card.js","components/CardList.js","components/ErrorBoundary.js","components/Scroll.js","components/SearchBox.js","containers/App.js","actions.js","reducers.js","serviceWorkerRegistration.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","ErrorBoundary","props","state","hasError","this","setState","children","Component","Scroll","style","overflowY","border","height","SearchBox","searchChange","type","placeholder","onChange","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","error","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","rootReducers","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.2c397655.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={robots[i].id}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n            />\n          );\n        })\n      }\n    </div>\n  )\n}\n\nexport default CardList;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n\n  componentDidCatch() {\n    this.setState({ hasError: true});\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooops. That is not good</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflowY: 'scroll', border: '1px solid black', height: '800px' }}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        aria-label='Search Robots'\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  )\n}\n\nexport default SearchBox;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { requestRobots, setSearchField } from '../actions';\nimport CardList from '../components/CardList';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Scroll from '../components/Scroll';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\n\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { robots, searchField, onSearchChange, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return (\n      <div className='tc'>\n        <h1 className='f1'>RoboFriends</h1>\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          {isPending ? <h1>Loading</h1> :\n            <ErrorBoundary>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundary>\n          }\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n}","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  robots: [],\n  isPending: true\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false };\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload };\n    default:\n      return state;\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, combineReducers, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport 'tachyons';\nimport App from './containers/App';\nimport './index.css';\nimport { requestRobots, searchRobots } from './reducers';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nconst logger = createLogger();\n\nconst rootReducers = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();"],"sourceRoot":""}